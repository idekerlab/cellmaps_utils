import os
import sys
import shutil
from datetime import date
import logging
import csv
import pandas as pd
import cellmaps_utils
from cellmaps_utils.basecmdtool import BaseCommandLineTool
from cellmaps_utils.exceptions import CellMapsError
from cellmaps_utils import constants
from cellmaps_utils.provenance import ProvenanceUtil

logger = logging.getLogger(__name__)


class TableFromROCrates(BaseCommandLineTool):
    """
    Creates table of meta data and links from
    one or more RO-Crates
    """
    COMMAND = 'rocratetable'

    ID_COL = 'FAIRSCAPE ARK ID'
    DATE_COL = 'Date'
    COMPUTATION_COL = 'Name of Computation'
    DESCRIPTION_COL = 'Description'
    KEYWORDS_COL = 'Keywords'
    DOWNLOAD_COL = 'Download RO-Crate Data Package'
    GENERATED_COL = 'Generated By Software'
    OUTPUT_COL = 'Output Dataset'
    RESPONSIBLE_COL = 'Responsible Lab'

    COLUMNS = [ID_COL, DATE_COL,
               COMPUTATION_COL,
               DESCRIPTION_COL, KEYWORDS_COL,
               DOWNLOAD_COL,
               GENERATED_COL,
               OUTPUT_COL,
               RESPONSIBLE_COL]

    def __init__(self, theargs,
                 provenance_utils=ProvenanceUtil()):
        """
        Constructor

        :param theargs: Command line arguments that at minimum need
                        to have the following attributes:
        :type theargs: :py:class:`~python.argparse.Namespace`
        """
        super().__init__()
        self._outdir = os.path.abspath(theargs.outdir)
        self._rocrates = theargs.rocrates
        self._date = theargs.date
        self._provenance_utils = provenance_utils
        self._input_data_dict = theargs.__dict__

    def run(self):
        """

        :return:
        """
        if os.path.exists(self._outdir):
            raise CellMapsError(self._outdir + ' already exists')

        logger.debug('Creating directory ' + str(self._outdir))
        os.makedirs(self._outdir, mode=0o755)

        table_file = os.path.join(self._outdir, 'data.tsv')
        with open(table_file, 'w', newline='') as f:
            writer = csv.DictWriter(f, delimiter='\t',
                                    fieldnames=TableFromROCrates.COLUMNS)
            writer.writeheader()
            for rocrate in self._rocrates:
                rocrate_dict = self._get_rocrate_as_dict(rocrate)
                print(rocrate_dict['keywords'])
                prov_attrs = self._provenance_utils.get_rocrate_provenance_attributes(rocrate=rocrate_dict)
                print(rocrate + ': ' + 'Keywords: ' + str(prov_attrs.get_keywords()))
                row = {TableFromROCrates.ID_COL: self._provenance_utils.get_id_of_rocrate(rocrate=rocrate_dict),
                       TableFromROCrates.DATE_COL: self._date,
                       TableFromROCrates.COMPUTATION_COL: prov_attrs.get_name(),
                       TableFromROCrates.DESCRIPTION_COL: prov_attrs.get_description(),
                       TableFromROCrates.KEYWORDS_COL: ','.join(prov_attrs.get_keywords()),
                       TableFromROCrates.DOWNLOAD_COL: 'NA',
                       TableFromROCrates.GENERATED_COL: 'NA',
                       TableFromROCrates.RESPONSIBLE_COL: prov_attrs.get_organization_name()}
                writer.writerow(row)

        return 0

    def _get_rocrate_as_dict(self, rocrate=None):
        """
        Gets ro-crate-metadata.json as a dict
        from
        :param rocrate: Path to directory, ro-crate meta data file, tar file, or tar.gz file
        :type rocrate: str
        :return:
        """
        if os.path.isdir(rocrate):
            return self._provenance_utils.get_rocrate_as_dict(rocrate_path=rocrate)
        if not os.path.isfile(rocrate):
            raise CellMapsError('Invalid rocrate: ' + str(rocrate))
        if rocrate.endswith('.tar'):
            raise CellMapsError('Parsing ' + str(rocrate) + ' not supported yet')
        if rocrate.endswith('.tar.gz') or rocrate.endswith('.tgz'):
            raise CellMapsError('Parsing ' + str(rocrate) + ' not supported yet')
        return self._provenance_utils.get_rocrate_as_dict(rocrate_path=rocrate)

    def add_subparser(subparsers):
        """

        :return:
        """
        desc = """

        Version {version}

        {cmd} Creates meta data Table from one or more RO-Crates
        """.format(version=cellmaps_utils.__version__,
                   cmd=TableFromROCrates.COMMAND)

        parser = subparsers.add_parser(TableFromROCrates.COMMAND,
                                       help='Creates metadata table from RO-Crates',
                                       description=desc,
                                       formatter_class=constants.ArgParseFormatter)
        parser.add_argument('outdir',
                            help='Directory metadata tables will be created')
        parser.add_argument('--rocrates', nargs='+',
                            help='Path to RO-Crates used for table generation. ')
        parser.add_argument('--date', default=date.today().strftime('%m-%d-%Y'),
                            help='Date to list in table for RO-Crates')

        return parser

